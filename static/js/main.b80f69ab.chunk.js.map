{"version":3,"sources":["StatCard.js","HospitalCard.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["CardTile","Card","text","style","backgroundColor","this","props","color","Body","Title","title","Text","fontSize","value","React","Component","HospitalCard","border","name","namesi","totalTreatment","localTreatment","foreignTreatment","Homepage","state","dataArray","hospitalArray","fetch","then","res","json","results","setState","data","hospital_data","catch","error","console","log","no","Intl","NumberFormat","format","Navbar","bg","variant","Brand","href","Nav","className","Link","update_date_time","Container","width","Row","Col","xs","md","textAlign","StatCard","local_new_cases","local_total_cases","local_deaths","local_recovered","seperator","global_new_cases","global_total_cases","global_deaths","global_recovered","minWidth","local_active_cases","local_total_number_of_individuals_in_hospitals","map","hospital","key","name_si","treatment_total","treatment_local","treatment_foreign","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b80f69ab.chunk.js","sourcesContent":["import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import AIcon from '@material-ui/icons/AccessAlarm';\r\n\r\nclass CardTile extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card text=\"white\" style={{ backgroundColor: this.props.color }}>\r\n                    <Card.Body>\r\n                        <Card.Title>{this.props.title}</Card.Title>\r\n                        <Card.Text style={{ fontSize: \"48px\" }}>\r\n\r\n                            {this.props.value}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default CardTile","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nclass HospitalCard extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card border=\"secondary\" text=\"dark\">\r\n                    <Card.Body>\r\n                        <Card.Title>{this.props.name} <br></br> {this.props.namesi}</Card.Title>\r\n                        <Card.Text >\r\n                            <br></br>\r\n                            <h6>Currently on treatement</h6> <h3>{this.props.totalTreatment}</h3>\r\n                            Locals - {this.props.localTreatment}<br></br>\r\n                            Foreigners - {this.props.foreignTreatment}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HospitalCard","import React from 'react'\r\nimport StatCard from './StatCard'\r\nimport HospitalCard from './HospitalCard'\r\nimport { Container, Card } from 'react-bootstrap'\r\nimport { Row } from 'react-bootstrap'\r\nimport { Col } from 'react-bootstrap'\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Nav } from 'react-bootstrap';\r\n\r\nimport './App.css';\r\n\r\n// import { Item } from 'react-bootstrap/lib/Breadcrumb'\r\n// import { Jumbotron } from 'react-bootstrap'\r\n// import { Button } from 'react-bootstrap'\r\n\r\n\r\nclass Homepage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            dataArray: [],\r\n            hospitalArray: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://hpb.health.gov.lk/api/get-current-statistical')\r\n            .then(res => res.json())\r\n            .then(results => {\r\n                this.setState({\r\n                    dataArray: results.data,\r\n                    hospitalArray: results.data.hospital_data\r\n                })\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    seperator(no) {\r\n        let nfObject = new Intl.NumberFormat('en-US');\r\n        let output = nfObject.format(no);\r\n        return output;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\"><h3>COVID-19 Tracker</h3></Navbar.Brand>\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"\"><h6>Last updated at - {this.state.dataArray.update_date_time}</h6></Nav.Link>\r\n                    </Nav>\r\n\r\n                </Navbar>\r\n                <div>\r\n                    <Container style={{ width: \"100%\" }} className=\"pr-0\">\r\n                        <Row style={{ width: \"100%\" }} className=\"pr-0\">\r\n                            <Col xs={12} md={6} className=\"mt-4 pr-0\">\r\n                                <Container style={{ textAlign: \"center\" }} className=\"pr-0\">\r\n                                    <Row style={{ width: \"100%\", }} className=\"pr-0\">\r\n                                        <Col>\r\n                                            <h5>Sri Lankan Statistics</h5>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n                                    <Row style={{ width: \"100%\" }} className=\"pr-0\">\r\n                                        <Col xs={12} md={6} className=\"mt-2 pr-0\" >\r\n                                            <StatCard title=\"New Cases\" value={this.state.dataArray.local_new_cases} color=\"#025E97\"></StatCard>\r\n                                        </Col>\r\n\r\n                                        <Col xs={12} md={6} className=\"mt-2 pr-0\">\r\n                                            <StatCard title=\"Total Cases\" value={this.state.dataArray.local_total_cases} color=\"#FF9700 \"></StatCard>\r\n                                        </Col>\r\n\r\n\r\n                                    </Row>\r\n                                    <Row style={{ width: \"100%\" }} className=\"pr-0\">\r\n                                        <Col xs={12} md={6} className=\"mt-2 pr-0\">\r\n                                            <StatCard title=\"Total Deaths\" value={this.state.dataArray.local_deaths} color=\"#D80505\"></StatCard>\r\n                                        </Col>\r\n                                        <Col xs={12} md={6} className=\"mt-2 pr-0\">\r\n                                            <StatCard title=\"Total Recovered\" value={this.state.dataArray.local_recovered} color=\"#5AA001\"></StatCard>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n                                </Container>\r\n\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6} className=\"mt-4 pr-0\">\r\n                                <Container style={{ width: \"100%\" }} className=\"pr-0\">\r\n                                    <Row style={{ width: \"100%\", }} className=\"pr-0\">\r\n                                        <Col>\r\n                                            <h5>Global Statistics</h5>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n                                    <Row style={{ width: \"100%\" }} className=\"pr-0\">\r\n                                        <Col xs={12} md={6} className=\"mt-2 pr-0\">\r\n                                            <StatCard title=\"New Cases\" value={this.seperator(this.state.dataArray.global_new_cases)} color=\"#025E97\"></StatCard>\r\n                                        </Col>\r\n\r\n                                        <Col xs={12} md={6} className=\"mt-2 pr-0\">\r\n                                            <StatCard title=\"Total Cases\" value={this.seperator(this.state.dataArray.global_total_cases)} color=\"#FF9700 \"></StatCard>\r\n                                        </Col>\r\n\r\n\r\n                                    </Row>\r\n                                    <Row style={{ width: \"100%\", }} className=\"pr-0\">\r\n                                        <Col xs={12} md={6} className=\"mt-2 pr-0\">\r\n                                            <StatCard title=\"Total Deaths\" value={this.seperator(this.state.dataArray.global_deaths)} color=\"#D80505\"></StatCard>\r\n                                        </Col>\r\n                                        <Col xs={12} md={6} className=\"mt-2 pr-0\">\r\n                                            <StatCard title=\"Total Recovered\" value={this.seperator(this.state.dataArray.global_recovered)} color=\"#5AA001\"></StatCard>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n                                </Container>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                <div>\r\n                    <Container style={{ width: \"100%\" }} className=\"pr-0 mt-5\">\r\n                        <Row style={{ width: \"100%\", }} className=\"pr-0 mt-2 \">\r\n                            <Col>\r\n                                <h5>Sri Lankan Hospital Overview</h5>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                        <Row style={{ width: \"100%\" }} className=\"pr-0 mt-2\">\r\n                            <Col xs={12} md={6} className=\"pr-0 mt-2\">\r\n                                <Card text=\"white\" style={{ minWidth: '15rem', backgroundColor: \"#D1A000\" }}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Active COVID-19 cases in Sri Lanka</Card.Title>\r\n                                        <Card.Text style={{ fontSize: \"48px\" }}>\r\n                                            {this.state.dataArray.local_active_cases}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col xs={12} md={6} className=\"pr-0 mt-2\">\r\n                                <Card text=\"white\" style={{ minWidth: '15rem', backgroundColor: \"#D1A000\" }}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Total number of individuals hospitalized in Sri Lanka</Card.Title>\r\n                                        <Card.Text style={{ fontSize: \"48px\" }}>\r\n                                            {this.state.dataArray.local_total_number_of_individuals_in_hospitals}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row style={{ width: \"100%\" }} className=\"pr-0 mt-2 mb-2\">\r\n                            {\r\n                                this.state.hospitalArray.map((hospital, key) =>\r\n                                    <Col xs={12} md={6} className=\"mt-1 mb-2 pr-0\">\r\n                                        <HospitalCard\r\n                                            name={hospital.hospital.name}\r\n                                            namesi={hospital.hospital.name_si}\r\n                                            totalTreatment={hospital.treatment_total}\r\n                                            localTreatment={hospital.treatment_local}\r\n                                            foreignTreatment={hospital.treatment_foreign}\r\n                                        >\r\n\r\n                                        </HospitalCard>\r\n                                    </Col>\r\n\r\n                                )\r\n                            }\r\n\r\n                        </Row>\r\n\r\n\r\n                    </Container>\r\n\r\n\r\n                </div>\r\n                <Navbar bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\">Source -</Navbar.Brand>\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link\r\n                            href=\"https://hpb.health.gov.lk/en/api-documentation?fbclid=IwAR0JWu_XtDsXHk5ZzN0xkYDd2V2Hc5-tQ7XHTO7Oh2FqJberHSNMbD1gzzs\">\r\n                            Health Promotion Bureau\r\n                            </Nav.Link>\r\n                    </Nav>\r\n\r\n                </Navbar>\r\n\r\n\r\n            </div >\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homepage","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Homepage from './Homepage'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage ></Homepage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}